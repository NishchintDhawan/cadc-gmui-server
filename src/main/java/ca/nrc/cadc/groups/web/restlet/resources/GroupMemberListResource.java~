/*
 ************************************************************************
 ****  C A N A D I A N   A S T R O N O M Y   D A T A   C E N T R E  *****
 *
 * (c) 2010.                         (c) 2010.
 * National Research Council            Conseil national de recherches
 * Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6
 * All rights reserved                  Tous droits reserves
 *
 * NRC disclaims any warranties         Le CNRC denie toute garantie
 * expressed, implied, or statu-        enoncee, implicite ou legale,
 * tory, of any kind with respect       de quelque nature que se soit,
 * to the software, including           concernant le logiciel, y com-
 * without limitation any war-          pris sans restriction toute
 * ranty of merchantability or          garantie de valeur marchande
 * fitness for a particular pur-        ou de pertinence pour un usage
 * pose.  NRC shall not be liable       particulier.  Le CNRC ne
 * in any event for any damages,        pourra en aucun cas etre tenu
 * whether direct or indirect,          responsable de tout dommage,
 * special or general, consequen-       direct ou indirect, particul-
 * tial or incidental, arising          ier ou general, accessoire ou
 * from the use of the software.        fortuit, resultant de l'utili-
 *                                      sation du logiciel.
 *
 *
 * @author jenkinsd
 * Sep 3, 2010 - 4:42:13 PM
 *
 *
 *
 ****  C A N A D I A N   A S T R O N O M Y   D A T A   C E N T R E  *****
 ************************************************************************
 */
package ca.nrc.cadc.groups.web.restlet.resources;

import java.io.IOException;
import java.io.Writer;
import java.security.Principal;

import org.json.JSONException;
import org.json.JSONWriter;
import org.restlet.data.Form;
import org.restlet.data.MediaType;
import org.restlet.representation.Representation;
import org.restlet.representation.WriterRepresentation;
import org.restlet.resource.Get;
import org.restlet.resource.Post;

import ca.nrc.cadc.ac.Group;
import ca.nrc.cadc.ac.GroupAlreadyExistsException;
import ca.nrc.cadc.ac.GroupNotFoundException;
import ca.nrc.cadc.ac.User;
import ca.nrc.cadc.ac.client.GMSClient;
import ca.nrc.cadc.auth.HttpPrincipal;
import ca.nrc.cadc.groups.web.view.JSONGroupViewImpl;
import ca.nrc.cadc.groups.web.view.JSONMemberViewImpl;
import ca.nrc.cadc.util.StringUtil;


/**
 * Handle details for Group members.
 */
public class GroupMemberListResource extends AbstractResource
{
    /**
     * Complete base constructor.
     *
     * @param   gmsClient              The client to the GMS Service.
     */
    public GroupMemberListResource(final GMSClient gmsClient)
    {
        super(gmsClient);
    }


    /**
     * Obtain the collection of Members for the current Group.
     *
     * @return Representation of Members for this Group.
     * @throws ca.nrc.cadc.ac.GroupNotFoundException Group isn't found.
     * @throws java.io.IOException                   Server error.
     */
    @Get("json")
    public Representation represent() throws GroupNotFoundException,
                                             IOException
    {
        final Group group = getGroup();

        return new WriterRepresentation(MediaType.APPLICATION_JSON)
        {
            @Override
            public void write(final Writer writer) throws IOException
            {
                final JSONWriter jsonWriter = new JSONWriter(writer);

                try
                {
                    writeMembers(jsonWriter, group);
                }
                catch (JSONException e)
                {
                    throw new IOException(e);
                }
            }
        };
    }

    void writeMembers(final JSONWriter jsonWriter, final Group group)
            throws JSONException
    {
        jsonWriter.array();

        try
        {
            for (final User<? extends Principal> userMember
                    : group.getUserMembers())
            {
                new JSONMemberViewImpl(jsonWriter).write(userMember);
            }

            for (final Group groupMember : group.getGroupMembers())
            {
                new JSONGroupViewImpl(jsonWriter).write(groupMember);
            }
        }
        finally
        {
            jsonWriter.endArray();
        }
    }

    @Post
    public void accept(final Representation entity)
            throws GroupNotFoundException, IOException
    {
        final Form form = new Form(entity);
        final String httpPrincipalName =
                form.getFirstValue("member-admin-search");

        if (StringUtil.hasText(httpPrincipalName))
        {
            getGMSClient().addUserMember(getGroupID(),
                                         new HttpPrincipal(httpPrincipalName));
        }
    }
}
